1. Folder structure
/src
|-- /assets
|-- /components
|-- /pages
|-- /interfaces
|-- /services
|-- /utils
|-- /hooks
router.tsx
app.ts

--------------------------------------------
2. Folder description
/assets
Mục đích: Lưu trữ tất cả các tệp tĩnh như hình ảnh, phông chữ, biểu tượng và style.
Ví dụ cấu trúc:
/assets
|-- /images
|-- /fonts
|-- /icons
|-- /styles
Hướng dẫn: Sắp xếp các thư mục con theo loại (ví dụ: images, styles) để đảm bảo dễ dàng tìm kiếm tệp.

/components
Mục đích: Lưu trữ các thành phần giao diện người dùng tái sử dụng.
Structure Example:
/components
|-- /homepage (dùng như dạng section của 1 trang, thí dụ homepage có các phần như Banner, Flash Sale...)
|   |-- SaleSection.tsx
|   |-- BannerSection.tsx
...
|-- /ui (dùng cho các UI components như card hoặc nút, nhưng ko phải dạng section)
|   |-- ProductCard.tsx
|   |-- SearchBar.tsx
Hướng dẫn:
Sử dụng thư mục cho các thành phần có nhiều tệp liên quan (ví dụ: styles, tests).
Viết các thành phần nhỏ, có thể tái sử dụng.

/pages
Mục đích: Lưu trữ các thành phần cấp trang đại diện cho các route trong ứng dụng.
Ví dụ cấu trúc:
/pages
|-- /home
|   |-- Home.tsx
|-- /about
|   |-- About.tsx
|-- /dashboard
    |-- Dashboard.tsx
Hướng dẫn:
Mỗi thư mục có thể chứa các thành phần liên quan cụ thể đến trang.
Tránh logic nghiệp vụ ở đây; sử dụng services hoặc utils cho các chức năng phức tạp.

/interfaces
Mục đích: Định nghĩa các interface và type của TypeScript cho ứng dụng.
Ví dụ cấu trúc:
/interfaces
|-- User.ts
|-- Product.ts
Hướng dẫn:
Sử dụng tên tệp mô tả rõ ràng.
Nhóm các interface tương tự một cách hợp lý (ví dụ: tất cả liên quan đến người dùng).

/services
Mục đích: Xử lý các cuộc gọi API và tích hợp dịch vụ bên ngoài.
Ví dụ cấu trúc:
/services
|-- api.ts
|-- authService.ts
Hướng dẫn:
Tạo các hàm mô-đun cho các cuộc gọi API.
Sử dụng fetch với xử lý lỗi đúng cách.

/utils
Mục đích: Lưu trữ các hàm tiện ích cho logic nghiệp vụ tái sử dụng.
Ví dụ cấu trúc:
/utils
|-- dateFormatter.ts
|-- numberFormatter.ts
Hướng dẫn:
++Giữ các hàm nhỏ và cụ thể.
++Tránh bất kỳ thao tác DOM nào ở đây.

/hooks
Mục đích: Lưu trữ các hook React tùy chỉnh.
Ví dụ cấu trúc:
/hooks
|-- useAuth.ts
|-- useFetch.ts
Hướng dẫn:
Tiền tố các tệp bằng use để chỉ ra rằng chúng là hook.
Duy trì sự tách biệt các mối quan tâm cho các hook.

/context
Mục đích: Lưu trữ các context React để quản lý trạng thái toàn cục.
Ví dụ cấu trúc:
/context
|-- AuthContext.tsx
|-- ThemeContext.tsx
Hướng dẫn:
Sử dụng React.createContext và useContext.
Tách biệt các context theo chức năng (ví dụ: xác thực, giao diện người dùng).

--------------------------------------------

Lưu ý:
++ Tên folder không được viết hoa.
++ Tên components viết hoa chữ cái đầu (Ex: BannerSection.tsx)
++ Tên interface viết hoa chữ cái đầu (Ex: Product.ts)
++ Tên service viết hoa chữ cái đầu (EX: ProductService.ts)
++ Tên context viết hoa chữ cái đầu (EX: ProductService.ts). Vì không dùng redux nên không phải dùng store.
++ Tên file hooks, utils không viết hoa chữ cái đầu(Ex: formatter.ts, time.ts, useFetch.ts,...)